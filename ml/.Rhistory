library(rstudio.prefs)
use_rstudio_prefs(theme_editor = "Solarized Dark")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_knit$set(root.dir = "/Users/charleshanks/Desktop/MSDS/SPRING_23/ML")
library(tidyverse)
library(caret)
library(naivebayes)
library(tidytext)
wine = read_rds("pinot.rds")
names(wine)[names(wine) == 'id'] = 'ID'
wine2 = wine %>% mutate(acidity = as.integer(str_detect(description, "[Aa]cidity")),
nose = as.integer(str_detect(description, "[Nn]ose")),
palate = as.integer(str_detect(description, "[Pp]alate"))) %>%
select(province, acidity,nose, palate )
wine_index <- createDataPartition(wine2$province, p = 0.8, list = FALSE)
train <- wine2[ wine_index, ]
test <- wine2[-wine_index, ]
control <- trainControl(method = "cv", number = 5)
m1 <- train(province ~ .,
data = train,
method = "naive_bayes",
tuneGrid = expand.grid(usekernel = c(T,F), laplace = T, adjust = T),
metric = "Kappa",
trControl = control)
m1
confusionMatrix(predict(m1,test), factor(test$province))
set.seed(504)
wine2 = wine %>% mutate(acidity = as.integer(str_detect(description, "[Aa]cidity")),
nose = as.integer(str_detect(description, "[Nn]ose")),
palate = as.integer(str_detect(description, "[Pp]alate"))) %>%
select(province, acidity,nose, palate )
wine_index <- createDataPartition(wine2$province, p = 0.8, list = FALSE)
train <- wine2[ wine_index, ]
test <- wine2[-wine_index, ]
control <- trainControl(method = "cv", number = 5)
m1 <- train(province ~ .,
data = train,
method = "naive_bayes",
tuneGrid = expand.grid(usekernel = c(T,F), laplace = T, adjust = T),
metric = "Kappa",
trControl = control)
m1
confusionMatrix(predict(m1,test), factor(test$province))
3724/8380
#doc term matrix:
df <- wine %>%
unnest_tokens(word, description) %>%
anti_join(stop_words) %>% # get rid of stop words
filter(word != "wine") %>%
filter(word != "pinot") %>%
count(ID, word) %>%
group_by(ID) %>%
mutate(freq = n/sum(n)) %>%
mutate(exists = (n>0)) %>%
ungroup %>%
group_by(word) %>%
mutate(total = sum(n))
num_fruit = df %>% filter(word == "fruit") %>% group_by(ID) %>% nrow()
#3724 wines have fruit in description
total_wine = nrow(wine)
#8380
p_f = num_fruit/total_wine
#.444 probability that there is fruit is description
#probability that wine is burgundy
p_b = wine %>% filter(province == "Burgundy") %>% count()/total_wine
#.142
#subset with only burgundy wines
burg_province = wine %>% filter(province == "Burgundy")
#burgundy wine term matrix
bp_df <- burg_province %>%
unnest_tokens(word, description) %>%
anti_join(stop_words) %>%
filter(word != "wine") %>%
filter(word != "pinot") %>%
count(ID, word)
fruit_burg = bp_df %>% filter(word == "fruit")
#520 burgundy have fruit in the description
#So P(Fruit | Burgundy)
p_fb = (nrow(fruit_burg))/(nrow(burg_province))
#.439
# P(Burgundy | Fruit) = P(Fruit | Burgundy) * P(Burgundy) / P(Fruit)
answer = round((p_b*p_fb)/(p_f),2)
answer
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_knit$set(root.dir = "/Users/charleshanks/Desktop/MSDS/SPRING_23/ML")
library(tidyverse)
library(caret)
library(naivebayes)
library(tidytext)
wine = read_rds("pinot.rds")
names(wine)[names(wine) == 'id'] = 'ID'
df %>% filter(word == "fruit")
wine %>% mutate(fruit = str_detect(description, "[Ff]ruit"))
wine = wine %>% mutate(fruit = as.integer(str_detect(description, "[Ff]ruit")))
wine
sum(wine$fruit)
dtxt <- wtxt %>% mutate(province = ifelse(province == "New_York", "New York", "Other")) %>%
filter(!(word %in% c("wine","pinot","drink","noir","vineyard","palate","notes","flavors","bottling","bottle","finish"))) %>%
filter(total > 400) %>%
group_by(province, word) %>%
count() %>%
group_by(province) %>%
mutate(proportion = n / sum(n)) %>%
pivot_wider(id_cols = word, names_from = province, values_from = proportion) %>%
mutate(diff = New_York - Other)
knitr::opts_knit$set(root.dir = "/Users/charleshanks/Desktop/MSDS/SPRING_23/ML")
setwd("/Users/charleshanks/Desktop/MSDS/SPRING_23/ML")
wine <-  read_rds("pinot.rds") %>%
mutate(province = as.numeric(province=="Oregon"))
wine_words <- function(df, j = 1000, stem=F){
library(tidytext)
library(SnowballC)
data(stop_words)
wine_words <- function(df, j = 1000, stem=F){
library(tidytext)
library(SnowballC)
data(stop_words)
words <- df %>%
unnest_tokens(word, description) %>%
anti_join(stop_words) %>% # get rid of stop words
filter(!(word %in% c("wine","pinot","vineyard")))
if(stem){
words <- words %>%
mutate(word = wordStem(word))
}
words <- words %>%
count(id, word) %>%
group_by(id) %>%
mutate(exists = (n>0)) %>%
ungroup %>%
group_by(word) %>%
mutate(total = sum(n)) %>%
filter(total > j) %>%
pivot_wider(id_cols = id, names_from = word, values_from = exists, values_fill = list(exists=0)) %>%
right_join(select(df,id,province)) %>%
#drop_na() %>%
select(-id)
words <- replace(words, is.na(words), FALSE)
}
# create new dataframe with defaults from function
wino <- wine_words(wine)
wino %>%
head(10) %>%
select(1:5,province)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_knit$set(root.dir = "/Users/charleshanks/Desktop/MSDS/SPRING_23/ML")
setwd("/Users/charleshanks/Desktop/MSDS/SPRING_23/ML")
library(tidyverse)
library(caret)
wine <-  read_rds("pinot.rds") %>%
mutate(province = as.numeric(province=="Oregon"))
## create a function to extract words with totals > j
wine_words <- function(df, j = 1000, stem=F){
library(tidytext)
library(SnowballC)
data(stop_words)
words <- df %>%
unnest_tokens(word, description) %>%
anti_join(stop_words) %>% # get rid of stop words
filter(!(word %in% c("wine","pinot","vineyard")))
if(stem){
words <- words %>%
mutate(word = wordStem(word))
}
words <- words %>%
count(id, word) %>%
group_by(id) %>%
mutate(exists = (n>0)) %>%
ungroup %>%
group_by(word) %>%
mutate(total = sum(n)) %>%
filter(total > j) %>%
pivot_wider(id_cols = id, names_from = word, values_from = exists, values_fill = list(exists=0)) %>%
right_join(select(df,id,province)) %>%
#drop_na() %>%
select(-id)
words <- replace(words, is.na(words), FALSE)
}
# create new dataframe with defaults from function
wino <- wine_words(wine)
wino
wino %>%
head(10) %>%
select(1:5,province)
set.seed(504)
wine_index <- createDataPartition(wino$province, p = 0.80, list = FALSE)
train <- wino[ wine_index, ]
test <- wino[-wine_index, ]
table(train$province)
control <- trainControl(method = "cv", number = 5)
fit <- train(province ~ .,
data = train,
trControl = control,
method = "glm",
family = "binomial")
#show the odds ratios for top coefficients
odds_ratio <- exp(coef(fit$finalModel))
data.frame(name = names(odds_ratio), odds_ratio = odds_ratio) %>%
arrange(desc(odds_ratio)) %>%
head()
prob <- predict(fit, newdata=test)
head(prob)
pred <- ifelse(prob > 0.5, 1, 0)
confusionMatrix(factor(pred),factor(test$province))
set.seed(504)
wino <- wine_words(wine, j=500)
wine_index <- createDataPartition(wino$province, p = 0.80, list = FALSE)
train <- wino[ wine_index, ]
test <- wino[-wine_index, ]
fit <- train(province ~ .,
data = train,
trControl = control,
method = "glm",
family = "binomial")
#show the odds ratios for top coefficients
odds_ratio <- exp(coef(fit$finalModel))
data.frame(name = names(odds_ratio), odds_ratio = odds_ratio) %>%
arrange(desc(odds_ratio)) %>%
head()
prob <- predict(fit, newdata=test)
pred <- ifelse(prob > 0.5, 1, 0)
confusionMatrix(factor(pred),factor(test$province))
set.seed(504)
wino <- wine_words(wine, j=500, stem = T)
wine_index <- createDataPartition(wino$province, p = 0.80, list = FALSE)
train <- wino[ wine_index, ]
test <- wino[-wine_index, ]
fit <- train(province ~ .,
data = train,
trControl = control,
method = "glm",
family = "binomial")
#show the odds ratios for top coefficients
odds_ratio <- exp(coef(fit$finalModel))
data.frame(name = names(odds_ratio), odds_ratio = odds_ratio) %>%
arrange(desc(odds_ratio)) %>%
head()
## create a function to extract words with totals > j
?wordStem()
words
words <- df %>%
unnest_tokens(word, description) %>%
anti_join(stop_words) %>% # get rid of stop words
filter(!(word %in% c("wine","pinot","vineyard")))
wine <-  read_rds("pinot.rds") %>%
mutate(province = as.numeric(province=="Oregon"))
wine_words <- function(df, j = 1000, stem=F){
library(tidytext)
library(SnowballC)
data(stop_words)
words <- df %>%
unnest_tokens(word, description) %>%
anti_join(stop_words) %>% # get rid of stop words
filter(!(word %in% c("wine","pinot","vineyard")))
if(stem){
words <- words %>%
mutate(word = wordStem(word))
}
words <- words %>%
count(id, word) %>%
group_by(id) %>%
mutate(exists = (n>0)) %>%
ungroup %>%
group_by(word) %>%
mutate(total = sum(n)) %>%
filter(total > j) %>%
pivot_wider(id_cols = id, names_from = word, values_from = exists, values_fill = list(exists=0)) %>%
right_join(select(df,id,province)) %>%
#drop_na() %>%
select(-id)
words <- replace(words, is.na(words), FALSE)
}
df
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/charleshanks/Desktop/MSDS/SPRING_23/ML")
library(tidyverse)
library(caret)
library(naivebayes)
library(fastDummies)
wine = read_rds("pinot.rds")
names(wine)[names(wine) == 'id'] = 'ID'
wine
df %>%
left_join(select(wine, ID, province), by = "ID") %>%
count(province, word) %>%
group_by(province) %>%
top_n(10,n) %>%
arrange(province, desc(n))
wtxt <- wine %>%
unnest_tokens(word, description) %>%
anti_join(stop_words) %>%
filter(str_detect(string = word, pattern = "[a-z+]")) %>%  # get rid weird non alphas
filter(str_length(word)>3) %>%  # get rid of strings shorter than 3 characters
group_by(word) %>%
mutate(total=n()) %>%
ungroup()
wtxt
wtxt
wtxt
wtxt %>% mutate(province = ifelse(province == "New York", "New York", "Other")) %>%
filter(!(word %in% c("wine","pinot","drink","noir","vineyard","palate","notes","flavors","bottling"))) %>%
filter(total > 400) %>%
group_by(province, word) %>%
count() %>%
group_by(province) %>%
mutate(proportion = n / sum(n)) %>%
pivot_wider(id_cols = word, names_from = province, values_from = proportion)
wtxt %>% mutate(province = ifelse(province == "New_York", "New_York", "Other")) %>%
filter(!(word %in% c("wine","pinot","drink","noir","vineyard","palate","notes","flavors","bottling"))) %>%
filter(total > 400) %>%
group_by(province, word) %>%
count() %>%
group_by(province) %>%
mutate(proportion = n / sum(n)) %>%
pivot_wider(id_cols = word, names_from = province, values_from = proportion) %>%
```
wtxt %>% mutate(province = ifelse(province == "New_York", "New_York", "Other")) %>%
filter(!(word %in% c("wine","pinot","drink","noir","vineyard","palate","notes","flavors","bottling"))) %>%
filter(total > 400) %>%
group_by(province, word) %>%
count() %>%
group_by(province) %>%
mutate(proportion = n / sum(n)) %>%
pivot_wider(id_cols = word, names_from = province, values_from = proportion)
wtxt %>% mutate(province = ifelse(province == "New_York", "New_York", "Other")) %>%
filter(!(word %in% c("wine","pinot","drink","noir","vineyard","palate","notes","flavors","bottling"))) %>%
filter(total > 400) %>%
group_by(province, word) %>%
count() %>%
group_by(province) %>%
mutate(proportion = n / sum(n)) %>%
pivot_wider(id_cols = word, names_from = province, values_from = proportion) %>%
mutate(diff = New_York - Other)
wtxt %>% mutate(province = ifelse(province == "New_York", "New_York", "Other")) %>%
filter(!(word %in% c("wine","pinot","drink","noir","vineyard","palate","notes","flavors","bottling"))) %>%
filter(total > 400) %>%
group_by(province, word) %>%
count() %>%
group_by(province) %>%
mutate(proportion = n / sum(n)) %>%
pivot_wider(id_cols = word, names_from = province, values_from = proportion) %>%
mutate(diff = New_York - Other) %>% arrange(desc(diff)) %>% top_n(3)
wine
wine <-  read_rds("pinot.rds") %>%
mutate(province = as.numeric(province=="Oregon"))
wine
knitr::opts_chunk$set(echo = TRUE)
wine <-  read_rds("pinot.rds") %>%
mutate(province = as.numeric(province=="Marlborough"))
wine
wine_words <- function(df, j = 1000, stem=F){
library(tidytext)
library(SnowballC)
data(stop_words)
words <- df %>%
unnest_tokens(word, description) %>%
anti_join(stop_words) %>% # get rid of stop words
filter(!(word %in% c("wine","pinot","vineyard")))
if(stem){
words <- words %>%
mutate(word = wordStem(word))
}
words <- words %>%
count(id, word) %>%
group_by(id) %>%
mutate(exists = (n>0)) %>%
ungroup %>%
group_by(word) %>%
mutate(total = sum(n)) %>%
filter(total > j) %>%
pivot_wider(id_cols = id, names_from = word, values_from = exists, values_fill = list(exists=0)) %>%
right_join(select(df,id,province)) %>%
#drop_na() %>%
select(-id)
words <- replace(words, is.na(words), FALSE)
}
wine <-  read_rds("pinot.rds") %>%
mutate(province = as.numeric(province=="Marlborough"))
wine_words <- function(df, j = 1000, stem=F){
library(tidytext)
library(SnowballC)
data(stop_words)
words <- df %>%
unnest_tokens(word, description) %>%
anti_join(stop_words) %>% # get rid of stop words
filter(!(word %in% c("wine","pinot","vineyard")))
if(stem){
words <- words %>%
mutate(word = wordStem(word))
}
words <- words %>%
count(id, word) %>%
group_by(id) %>%
mutate(exists = (n>0)) %>%
ungroup %>%
group_by(word) %>%
mutate(total = sum(n)) %>%
filter(total > j) %>%
pivot_wider(id_cols = id, names_from = word, values_from = exists, values_fill = list(exists=0)) %>%
right_join(select(df,id,province)) %>%
#drop_na() %>%
select(-id)
words <- replace(words, is.na(words), FALSE)
}
wino <- wine_words(wine)
wino
set.seed(504)
wine_index <- createDataPartition(wino$province, p = 0.80, list = FALSE)
train <- wino[ wine_index, ]
test <- wino[-wine_index, ]
table(train$province)
control <- trainControl(method = "cv", number = 5)
fit <- train(province ~ .,
data = train,
trControl = control,
method = "glm",
family = "binomial")
odds_ratio <- exp(coef(fit$finalModel))
data.frame(name = names(odds_ratio), odds_ratio = odds_ratio) %>%
arrange(desc(odds_ratio)) %>%
head()
data.frame(name = names(odds_ratio), odds_ratio = odds_ratio) %>%
arrange(desc(odds_ratio)) %>%
head(20)
wine2 = wine <-  read_rds("pinot.rds") %>%
mutate(province = as.numeric(province=="Casablanca_Valley"))
wino2 = wine_words(wine2)
wino2 = wine_words(wine2)
wine2_index <- createDataPartition(wino2$province, p = 0.80, list = FALSE)
train <- wino2[ wine2_index, ]
test <- wino2[-wine2_index, ]
fit <- train(province ~ .,
data = train,
trControl = control,
method = "glm",
family = "binomial")
odds_ratio <- exp(coef(fit$finalModel))
data.frame(name = names(odds_ratio), odds_ratio = odds_ratio) %>%
arrange(desc(odds_ratio)) %>%
head(20)
